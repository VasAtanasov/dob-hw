# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'
settings = YAML.load_file File.join(File.dirname(__FILE__), 'settings.yml')

VAGRANTFILE_API_VERSION = settings['VAGRANTFILE_API_VERSION'] || "2"

vagrant_assets = File.join(File.dirname(__FILE__), "assets")
shared_dir = "#{settings["SHARED_DIR"]}"

class Machine
  attr_reader :hostname, :ip, :type

  def initialize(hostname, ip, type)
    @hostname = hostname
    @ip = ip
    @type = type
  end

end

class MachineType
  MACHINE_TYPES = [ MANAGER = "manager", WORKER = "worker" ]
end

def generate_machines(type, ip, size)
  machines = []
  (1..size).each do |n| 
    machine = Machine.new("#{type}-#{n}", "#{ip}#{n}", type)
    machines.push(machine)
  end

  return machines
end

if settings["MANAGERS"] <= 0 or settings["WORKERS"] <= 0
  puts "There must be at least one manager and one worker"
  exit 1
end

managers = generate_machines(MachineType::MANAGER, settings["MANAGER_IP"], settings["MANAGERS"])
workers = generate_machines(MachineType::WORKER, settings["WORKER_IP"], settings["WORKERS"])

manager = managers.shift
machines = managers + workers

File.open("#{vagrant_assets}/hosts", 'w') { |file| 
  file.write("#{manager.ip} #{manager.hostname} #{manager.hostname}\n")
  machines.each do |machine|
    file.write("#{machine.ip} #{machine.hostname} #{machine.hostname}\n")
  end
}

service_name = "autostack"

def set_commont_settings(config, machine)
  config.vm.hostname = machine.hostname
  config.vm.network "private_network", ip: "#{machine.ip}"
  config.vm.provider "virtualbox" do |vb|
    vb.name = machine.hostname
  end
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.ssh.insert_key = false
  config.vm.box = settings['BOX_NAME']
  config.vm.synced_folder ".", "/vagrant", disabled: true

  config.vm.provider "virtualbox" do |v, override|
    v.memory = settings['MEMORY']
    v.cpus = settings['CPUS']
    v.check_guest_additions = false
    v.customize ["modifyvm", :id, "--groups", "/#{service_name}"]
    override.vm.synced_folder "#{vagrant_assets}", "#{shared_dir}"
  end

  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  if File.file?("#{vagrant_assets}/logo") 
    config.vm.provision "file", source: "#{vagrant_assets}/logo", destination: "/tmp/logo"
    config.vm.provision "shell", inline: "cat /tmp/logo > /etc/profile.d/greeting.sh"
  end

  if File.file?("#{vagrant_assets}/hosts") 
    config.vm.provision "shell", inline: "cat #{shared_dir}/hosts >> /etc/hosts", privileged: true
  end

  config.vm.define manager.hostname do |m|
    set_commont_settings(m, manager)

    m.vm.provision "Init docker swarm", type: "shell" do |shell|
      shell.inline = "docker swarm init --advertise-addr #{manager.ip}"
    end

    m.vm.provision "Extract worker tocken", type: "shell" do |shell|
      shell.inline = "docker swarm join-token -q worker > #{shared_dir}/worker_token"
    end

    m.vm.provision "Extract manager tocken", type: "shell" do |shell|
      shell.inline = "docker swarm join-token -q manager > #{shared_dir}/manager_token"
    end

    # Create a local docker registry so the images can be shared between the nodes in the swarm.
    m.vm.provision "Create local docker registry", type: "shell" do |shell|
      shell.inline = "docker service create --name registry --publish published=5000,target=5000 registry:2 > /dev/null"
    end
    
    # A script (deploy_stack.sh) will be started and running in the background to wait for the other nodes in the swam to join
    # so to deploy the stack. It takse as un argguments the name of the stack, compose file and numeber of expected nodes.
    m.vm.provision "Waiting for nodes", type: "shell" do |shell|
      shell.inline = "nohup bash #{shared_dir}/deploy_stack.sh #{service_name} #{shared_dir}/app/docker-compose.yml #{machines.size} &> #{shared_dir}/deploy.out& sleep 1"
    end

    m.vm.network "forwarded_port", guest: 8001, host: 8001, protocol: "tcp", auto_correct: true, id: "api"
    m.vm.network "forwarded_port", guest: 3001, host: 3001, protocol: "tcp", auto_correct: true, id: "nginx"
    m.vm.network "forwarded_port", guest: 8008, host: 8008, protocol: "tcp", auto_correct: true, id: "adminer"
    m.vm.network "forwarded_port", guest: 3306, host: 3307, protocol: "tcp", auto_correct: true, id: "db"
  end

  machines.each.with_index(1) do |machine, index|
    config.vm.define machine.hostname do |i|
      set_commont_settings(i, machine)
      file_name = if machine.type == MachineType::MANAGER then "manager_token" else "worker_token" end
      i.vm.provision "shell", inline: "docker swarm join --advertise-addr #{machine.ip} --listen-addr #{machine.ip}:2377 --token `cat #{shared_dir}/#{file_name}` #{manager.ip}:2377"
    end
  end

end
